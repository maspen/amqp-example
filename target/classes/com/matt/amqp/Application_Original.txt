package com.matt.amqp;

import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.matt.amqp.listener.Listener;
import com.matt.amqp.sender.Sender;

@SpringBootApplication
public class Application_Original implements CommandLineRunner {
//	static String queueName = "test-queue";
	static String exchangeName = "new-exchange";
	static String routingKey = "foo.bar";

	@Autowired
	ConnectionFactory connectionFactory;

	// from Listener
//	@Autowired
//	SimpleMessageListenerContainer container;
//	@Autowired
//	EventHandler eventHandler;
//	@Autowired
//	MessageListenerAdapter adapter;
	@Autowired
	Listener listener;

	@Autowired
	Sender sender;

    public static void main(String[] args) {
        SpringApplication.run(Application_Original.class, args);
    }

	@Override
	public void run(String... arg0) throws Exception {
		//ConnectionFactory connectionFactory = new CachingConnectionFactory(host);

		// broker setup
		//RabbitAdmin rabbitAdmin = new RabbitAdmin(connectionFactory);
		//Queue queue = new Queue(queueName);
//		rabbitAdmin.declareQueue(queue);
//		TopicExchange exchange = new TopicExchange(exchangeName);
//		rabbitAdmin.declareExchange(topicExchange);
//		rabbitAdmin.declareBinding(BindingBuilder.bind(queue).to(topicExchange).with(routingKey));

		// listener & container
		//SimpleMessageListenerContainer container = new SimpleMessageListenerContainer(connectionFactory);
//		Object listener = new Object(){
//			public void handleMessage(String foo) {
//				System.out.println(foo);
//			}
//		};
		//MessageListenerAdapter adapter = new MessageListenerAdapter(listener);
		//MessageListenerAdapter adapter = new MessageListenerAdapter(eventHandler);
//		container.setMessageListener(adapter);
		//container.setQueueNames(queueName);
//		container.start();
		listener.start();

		// send something
//		RabbitTemplate template = new RabbitTemplate(connectionFactory);
//		template.convertAndSend(exchangeName, "foo.bar", "Hello world");

		sender.send(exchangeName, routingKey, "Hello world - FROM Sender ");

		Thread.sleep(1000);
//		container.stop();
		listener.stop();
	}
}
